//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
private:
  void dfs(int vis[],vector<vector<int>>& adj,int src, stack<int> &st){
    vis[src]=1;
    for(auto x :adj[src]){
        if(!vis[x])
        dfs(vis,adj,x,st);
    }
    st.push(src);
}
 
void dfs3(int newVis[] ,vector<int>newAdj[],int src){
    newVis[src]=1;
    for(auto x :newAdj[src]){
        if(!newVis[x])
        dfs3(newVis,newAdj,x);
    }
}
 
 
public:
//Function to find number of strongly connected components in the graph.
 
    int kosaraju(int V, vector<vector<int>>& adj)
    {
        //code here
       int vis[V] = {0};
       stack<int>st;
       for(int i=0; i<V;i++){
           if(!vis[i])
           dfs(vis,adj,i,st);
       }
       vector<int>newAdj[V];
       for(int i=0;i<V;i++){
           for(auto x:adj[i]){
               newAdj[x].push_back(i);
           }
       }
       int count=0;
       int newVis[V]= {0};
       while(!st.empty()){
            if(!newVis[st.top()]){
               count++;
               newVis[st.top()]=1;
               dfs3(newVis,newAdj,st.top());
            }
           st.pop();
        }
        return count;
    }
};




//{ Driver Code Starts.


int main()
{
    
    int t;
    cin >> t;
    while(t--)
    {
    	int V, E;
    	cin >> V >> E;

    	vector<vector<int>> adj(V);

    	for(int i = 0; i < E; i++)
    	{
    		int u, v;
    		cin >> u >> v;
    		adj[u].push_back(v);
    	}

    	Solution obj;
    	cout << obj.kosaraju(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
