/*-------------------- RECURSIVE -----------------

class Solution {
public:
    bool solve(vector<int>& nums, int i)
    {
        int n=nums.size();
        if(i==n-1) 
            return true;
        if(i>=n) 
            return false;
        for(int j=i+1;j<=i+nums[i];j++){   
            if(solve(nums,j)) 
                return true;
        }
        return false;
    }
    
    bool canJump(vector<int>& nums) {        
      return solve(nums,0);
    }
};

----------------- RECURSIVE --------------------*/


/*----------------- MEMOIZATION -----------------

class Solution {
public:
    int mem[10001];
    
    int solve(vector<int>& nums,int i)
    {
        if(i>=nums.size())
            return 0;
        if(i==nums.size()-1)
            return 1;
        if(mem[i]!=-1)
            return mem[i];
        int a=0;
        for(int k=1;k<=nums[i] && k+i<nums.size();k++)
        {
            if(k+i<nums.size() && mem[k+i]!=-1)
                a=a|mem[k+i];
            else if(k+i<nums.size())
               a=a|solve(nums,k+i);
            if(a==1)
               return 1;
        }
        return mem[i]=a;
    }
    
    bool canJump(vector<int>& nums) {
        memset(mem,-1,sizeof(mem));
        return solve(nums,0);
    }
};

----------------- MEMOIZATION ---------------------*/


// Tabulation dp ----------------.

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        bool dp[n];
        for(int i=0;i<n;i++)
            dp[i]=false;
        dp[0]=true;
        for(int i=0;i<n;i++)
        {
            for(int j=i-1;j>=0;j--)
            {
                if(dp[j]==true && j+nums[j]>=i)
                {
                    dp[i]=true;
                    break;
                }
            }
        }
        return dp[n-1];
    }
};

// Valley Peak Approach

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        int reachable=0;
        for(int i=0;i<n;i++){
          if(reachable < i)
           return false;
          reachable = max(reachable,i+nums[i]);
        }
        return true;
    }
};
