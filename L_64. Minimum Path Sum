/*--------------RECURSIVE-------------------

class Solution {
public:
    int solve(vector<vector<int>> grid, int i, int j, int m, int n){
        if(i==m-1 && j==n-1)
            return grid[i][j];
        if(i>=m || j>=n)
            return INT_MAX;
        else
            return grid[i][j]+min(solve(grid,i,j+1,m,n),solve(grid,i+1,j,m,n));
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        return solve(grid,0,0,m,n);
    }
};

----------- RECURSIVE ---------------------*/


/*--------- MEMOIZATION---------------------

class Solution {
public:
int solve(vector<vector<int>> &grid, int i, int j, int m, int n,vector<vector<int>> &mem){
    if(i==m-1 && j==n-1)
        return grid[i][j];
    if(i>=m || j>=n)
        return INT_MAX;
    if(mem[i][j]!=-1)
        return mem[i][j];
    else
        return mem[i][j]=grid[i][j]+min(solve(grid,i,j+1,m,n,mem),solve(grid,i+1,j,m,n,mem));
    }
    
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        if(m==1 && n==1)
            return grid[0][0];
        vector<vector<int>>mem(m,vector<int>(n,-1));
        return solve(grid,0,0,m,n,mem);
    }
};

---------- MEMOIZATION ----------------------*/


// Tabulation DP..

class Solution{
 public:
    int minPathSum(vector<vector<int>>& grid){
        int m = grid.size();
        if(m==0)
            return 0;
        int n = grid[0].size();
        vector<vector<int>> dp(m,vector<int>(n,0));
        dp[0][0] = grid[0][0];
        for(int i=1;i<n;i++)
            dp[0][i] = dp[0][i-1]+grid[0][i];
        for(int i=1;i<m;i++)
            dp[i][0] = dp[i-1][0]+grid[i][0];
        for(int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                dp[i][j] = grid[i][j]+min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
    }
};
