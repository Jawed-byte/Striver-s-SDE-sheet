/*
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int res = INT_MIN;
        for(int i=0;i<nums.size();i++) {
          for(int j=i;j<nums.size();j++) {
            int prod = 1;
            for(int k=i;k<=j;k++) 
                prod *= nums[k];
            res = max(res,prod);    
          }
        }
        return res;
    }
};
// Time Complexity: O(N^3)
*/

/*
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int res = INT_MIN;
        for(int i=0;i<nums.size();i++){
            int prod = 1;
            for(int j=i;j<nums.size();j++){
                prod = prod*nums[j];
                res = max(prod,res);
            }
            res = max(prod,res);
        }
        return res;
    }
};
// Time Complexity: O(N^2)
*/


class Solution{
public:
    int maxProduct(vector<int>& nums){
        int pre=1, suff=1;
        int res = INT_MIN;
        int n = nums.size();
        for(int i=0;i<n;i++){
            if(pre==0) pre=1;
            if(suff==0) suff=1;
            pre=pre*nums[i];
            suff=suff*nums[n-i-1];
            res=max(res,max(pre,suff));
        }
        return res;
    }
};
//Time Complexity: O(N)
