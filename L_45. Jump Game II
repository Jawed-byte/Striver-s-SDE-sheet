/*-------------- RECURSIVE -----------------

class Solution {
public:
    int solve(vector<int>& nums,int i){
        int n=nums.size();
        if(i>=n)
            return n;
        if(i == n-1)
            return 0;
        int ans = n;
        for(int j = i+1; j <= i+nums[i]; j++)
            ans = min(ans, solve(nums,j)+1);
        return ans;
    }
    
    int jump(vector<int>& nums) {
        int n = nums.size();
        return solve(nums,0);
    }
};

--------------- RECURSIVE --------------------*/

/*------------- MEMOIZATION ------------------

class Solution {
public:
    int mem[10001];

    int solve(vector<int>& nums, int i){
      int n=nums.size();
        if(i==n-1)
         return 0;
        if(i>=n)
         return n;
        if(mem[i]!=-1)
         return mem[i];
        int ans=n;
        for(int j=i+1;j<=i+nums[i];j++)
        ans=min(ans,solve(nums,j)+1);
        return mem[i]=ans;
    }
    int jump(vector<int>& nums) {
        memset(mem,-1,sizeof(mem));
        return solve(nums,0);
    }
};
----------------- MEMOIZATION ------------------*/


// Tabulation dp ----------------------------

class Solution {
public:
    int jump(vector<int>& nums) {
        int n=nums.size();
        int dp[n];
        for(int i=0;i<n;i++)
        dp[i]=n;
        dp[0]=0;
        for(int i=0;i<n;i++){
          for(int j=1;j<=nums[i];j++){
            if(i+j<n)
              dp[i+j] = min(dp[i+j],dp[i]+1);
          }
        }
        return dp[n-1];
    }
};
