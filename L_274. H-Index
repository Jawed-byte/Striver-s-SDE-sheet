Intution:

Step1: At first we sorted the citations array.
Step2: If first element of the array itself is greater than n that means every other element is greater than n, So returning n.
Step3: If there is only one element, If the element is non-zero returning 1 otherwise returning 0.
Step4: For every index we are calculating the no of elements left after that element in th array and storing it in left.
Step5: If at index array value is grater than or equal to the no of left elements then we are returning the left;


class Solution {
public:
    int hIndex(vector<int>& citations) {

        int n = citations.size();
        sort(citations.begin(),citations.end());

        if(citations[0]>=n)
          return n;
        
        if(n==1)
          return !(citations[0]==0);

        for(int i=0;i<n;i++){
          int left = n-i;

          if(citations[i] >= left) 
            return left;
        }
      return 0;
    }
};


// Method 2 (Binary Search)

class Solution {
public:
    int hIndex(vector<int>& citations) {
        int n=citations.size();
        if(n==1)
         return !(citations[0]==0);
        sort(citations.begin(),citations.end());
        if(citations[0]>=n)
            return n;
        int l=0, h=n-1, m=0;
        int res = 0;
        while(l<=h)
        {
            m=l+(h-l)/2;
            if(citations[m]>=n-m)
            {
                res = n-m;
                h = m-1;
            }
            else
                l = m + 1;
        }
        return res;
    }
};

 
