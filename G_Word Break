//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//User function template for C++

// A : given string to search
// B : vector of available strings

/* Recursion
class Solution {
    unordered_set<string> st;//dictionary
    bool partition(string s,int pos){
        if(pos==s.size())   
          return true;
        string t="";
        for(int i=pos;i<s.size();++i)
            if(st.count(s.substr(pos,i-pos+1)) && partition(s,i+1))
                return true;
        return false;
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        for(auto str: wordDict)
            st.insert(str);
        return partition(s,0);
    }
};
*/

/* Memoization 
class Solution {
    unordered_map<int,bool> mem;
    unordered_set<string> st;//dictionary
    bool partition(string s,int pos){
        if(pos==s.size())   
           return true;
        if(mem.count(pos))  
           return mem[pos];
        string t="";
        for(int i=pos;i<s.size();++i)
            if(st.count(s.substr(pos,i-pos+1)) && partition(s,i+1))
                return mem[pos] = true;
        return mem[pos] = false;
    }
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        for(auto str: wordDict)
            st.insert(str);
        return partition(s,0);
    }
};
*/

class Solution {
public:
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = s.size();
        bool dp[n+1][n+1];
        unordered_set<string> st;
        for(auto word: wordDict)
            st.insert(word);
        for(int len=1;len<=n;++len) //Window Size
        {
            int start = 1;
            int end = len;
            while(end<=n) //Sliding Window
            {
                string temp = s.substr(start-1,len);
                if(st.find(temp)!=st.end())
                    dp[start][end] = true;
                else
                {
                    bool flag = false;
                    for(int i=start;i<end;++i)
                        if(dp[start][i] && dp[i+1][end])
                        {
                            flag = true;
                            break;
                        }
                    dp[start][end] = flag;
                }
                start += 1;
                end += 1;
            }
        }
        return dp[1][n];
    }
};

//{ Driver Code Starts.

int main(){
    int t;
    cin>>t;
    while(t--){
        int n;
        cin>>n;
        vector<string> dict;
        for(int i=0;i<n;i++){
            string S;
            cin>>S;
            dict.push_back(S);
        }
        string line;
        cin>>line;
        Solution ob;
        cout<<ob.wordBreak(line, dict)<<"\n";
    }
}

// } Driver Code Ends
