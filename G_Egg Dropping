//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    /* Recursion
    int eggDrop(int e, int f) 
    {
        // your code here
        if(f==0 || f==1)
          return f;
        if(e==1)
          return f;
        int mn=INT_MAX-1;
        for(int k=1;k<=f;k++){
            int temp = 1+max(eggDrop(e-1,k-1),eggDrop(e,f-k));
            mn = min(mn,temp);
        }
        return mn;
    }
    */
    
    /* Memoization
    int solve(int e, int f,vector<vector<int>>& mem){
        if(f==0 || f==1)
          return f;
        if(e==1)
          return f;
        if(mem[e][f]!=-1)
          return mem[e][f];
        int mn=INT_MAX-1;
        for(int k=1;k<=f;k++){
            int temp = 1+max(eggDrop(e-1,k-1),eggDrop(e,f-k));
            mn = min(mn,temp);
        }
        return mem[e][f]=mn;
    }
    int eggDrop(int e, int f){
        vector<vector<int>> mem(e+1,vector<int>(f+1,-1));
        return solve(e,f,mem);
    }
    */
    
    // Optimized Memoization
    
    int solve(int e, int f,vector<vector<int>>& mem){
        if(f==0 || f==1)
          return f;
        if(e==1)
          return f;
        if(mem[e][f]!=-1)
          return mem[e][f];
        int mn=INT_MAX-1;
        for(int k=1;k<=f;k++){
            int low, high;
            if(mem[e-1][k-1]!=-1)
               low=mem[e-1][k-1];
            else
               low=solve(e-1,k-1,mem);
            if(mem[e][f-k]!=-1)
               high=mem[e][f-k];
            else
               high=solve(e,f-k,mem);
            int temp = 1+max(low,high);
            mn = min(mn,temp);
        }
        return mem[e][f]=mn;
    }
    int eggDrop(int e, int f){
        vector<vector<int>> mem(e+1,vector<int>(f+1,-1));
        return solve(e,f,mem);
    }
    
};

//{ Driver Code Starts.
int main()
{
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //taking eggs and floors count
        int n, k;
        cin>>n>>k;
        Solution ob;
        //calling function eggDrop()
        cout<<ob.eggDrop(n, k)<<endl;
    }
    return 0;
}

// } Driver Code Ends
