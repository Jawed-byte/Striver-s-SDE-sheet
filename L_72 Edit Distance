/*------------ RECURSIVE ----------------

class Solution {
public:
   int solve(string &word1, string &word2, int n, int m){
	 if(n==0)
		return m;
     if(m==0)
		return n;
     if(word1[n-1] == word2[m-1])
		return solve(word1, word2, n-1, m-1);

	 return 1 + min(solve(word1,word2,n-1,m-1),min(solve(word1,word2,n,   m-1),solve(word1,word2,n-1,m)));
   }

   int minDistance(string word1, string word2) {
	return solve(word1, word2, word1.size(), word2.size());
   }
};

--------------- RECURSIVE ------------------------*/


class Solution {
public:
   int mem[501][501];
   int solve(string &word1, string &word2, int n, int m){
	 if(n==0)
		return m;
     if(m==0)
		return n;
     if(mem[n][m]!=-1)
         return mem[n][m];
     if(word1[n-1] == word2[m-1])
		return mem[n][m]=solve(word1, word2, n-1, m-1);

	 return mem[n][m]=1 + min(solve(word1,word2,n-1,m-1),min(solve(word1,word2,n,   m-1),solve(word1,word2,n-1,m)));
   }

   int minDistance(string word1, string word2) {
       memset(mem,-1,sizeof(mem));
	   return solve(word1, word2, word1.size(), word2.size());
   }
};
