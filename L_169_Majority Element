// Method1: Brute Force 

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        return nums[nums.size()/2];
    }
};

// Method2: Hashing Solution 

class Solution{
public:
    int majorityElement(vector<int>& nums){
        unordered_map<int,int>mp;
        for(int i=0;i<nums.size();i++)
            mp[nums[i]]++;
        int res=0;
        for(auto it=mp.begin();it!=mp.end();it++){
            if(it->second > nums.size()/2){
                res=it->first;
                break;
            }
        }
        return res;
    }
};

// Method3:

class Solution{
public:
    int majorityElement(vector<int>& nums){
        int n=nums.size();
        int cnt=1,maj=nums[0];
        for(int i=0;i<n;i++){
            if(nums[i]==maj)
                cnt++;
            else
                cnt--;
            if(cnt==0){
                maj=nums[i];
                cnt=1;
            }
        }
        return maj;
    }
};
